//
// Clark Kromenaker
//
// Capable of taking sheep in text format and compiling it to a binary SheepScript asset.
// Uses the Sheep scanner/parser generated by Flex/Bison respectively.
//
#pragma once
#include <istream>
#include <map>
#include <string>

#include "SheepScanner.h"
#include "SheepScriptBuilder.h"
#include "sheep.tab.hh"

class SheepScript;

class SheepCompiler
{
public:
    // Compile directly into a new SheepScript asset.
    SheepScript* CompileToAsset(const char* filePath); // from file on disk
    SheepScript* CompileToAsset(const std::string& name, const std::string& sheep); // from string
    SheepScript* CompileToAsset(const std::string& name, std::istream& stream); // from any input stream

    // Compile to builder, don't create asset.
    bool Compile(const std::string& name, std::istream& stream);
    const SheepScriptBuilder& GetCompiledBuilder() const { return mBuilder; }

    // For logging warnings & errors.
	void Warning(SheepScriptBuilder* builder, const Sheep::location& location, const std::string& message);
    void Error(SheepScriptBuilder* builder, const Sheep::location& location, const std::string& message);
	
private:
    // Name of the SheepScript being compiled (for warning/error output).
    std::string mName;

    // The builder, which is used to gather the data after compilation.
    SheepScriptBuilder mBuilder;
};
